// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagement.Data.DBContexts;

namespace StudentManagement.Data.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    partial class StudentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudentManagement.Data.DBContexts.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.AdmissionbatchMaster", b =>
                {
                    b.Property<long>("AdmissionbatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Admissionbatch")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AdmissionbatchId");

                    b.ToTable("AdmissionbatchMasters");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.AdmissiontypeMaster", b =>
                {
                    b.Property<long>("AdmissiontypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Admissiontype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AdmissiontypeId");

                    b.ToTable("AdmissiontypeMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.BatchMaster", b =>
                {
                    b.Property<long>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BatchId");

                    b.ToTable("BatchMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.BloodgroupMaster", b =>
                {
                    b.Property<long>("BloodgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bloodgroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BloodgroupId");

                    b.ToTable("BloodgroupMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.BranchMaster", b =>
                {
                    b.Property<long>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("BranchId");

                    b.ToTable("BranchMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CampusMaster", b =>
                {
                    b.Property<long>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId");

                    b.ToTable("CampusMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CategoryMaster", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("CategoryMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CityMaster", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("CityMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CollegeDetail", b =>
                {
                    b.Property<long>("CollegeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdharNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AdmissionBatchTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdmissionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("BatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("CampusId")
                        .HasColumnType("bigint");

                    b.Property<long>("CollegeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CollegeRollNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Universityenrollmentnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.HasKey("CollegeDetailId");

                    b.HasIndex("AdmissionBatchTypeId");

                    b.HasIndex("AdmissionTypeId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CampusId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("branchId");

                    b.ToTable("CollegeDetail");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CollegeMaster", b =>
                {
                    b.Property<long>("PK_CollegeMaster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PK_CollegeMaster");

                    b.ToTable("CollegeMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CountryMaster", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CountryId");

                    b.ToTable("CountryMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CourseMaster", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CourseId");

                    b.ToTable("CourseMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.DegreeMaster", b =>
                {
                    b.Property<long>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("DegreeMarkingId")
                        .HasColumnType("bigint");

                    b.Property<int>("DegreeYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeId");

                    b.HasIndex("DegreeMarkingId");

                    b.ToTable("DegreeMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.DiplomaMaster", b =>
                {
                    b.Property<long>("DiplomaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("DiplomaMarkingId")
                        .HasColumnType("bigint");

                    b.Property<int>("DiplomaYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiplomaId");

                    b.HasIndex("DiplomaMarkingId");

                    b.ToTable("DiplomaMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.DocumentTypeMaster", b =>
                {
                    b.Property<long>("DocumentTypeMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DocumentTypeMasterId");

                    b.ToTable("DocumentTypeMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.Documents", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UploadPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.DomicileMaster", b =>
                {
                    b.Property<long>("DomicileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domicile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DomicileId");

                    b.ToTable("DomicileMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.EntranceExamMaster", b =>
                {
                    b.Property<long>("EntranceExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExamAir")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamCategoryRank")
                        .HasColumnType("int");

                    b.Property<long>("ExamTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("ExamYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MarkObtained")
                        .HasColumnType("int");

                    b.Property<string>("RollNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntranceExamId");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("EntranceExamMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.ExamTypeMaster", b =>
                {
                    b.Property<long>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamTypeMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.GenderMaster", b =>
                {
                    b.Property<long>("GenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenId");

                    b.ToTable("GenderMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.LGRelationMaster", b =>
                {
                    b.Property<long>("LGRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LGRelationId");

                    b.ToTable("LGRelationMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.MarkingSchemUGPGD", b =>
                {
                    b.Property<long>("MarkingShchemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MarkingShchem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarkingShchemId");

                    b.ToTable("MarkingSchemUGPGD");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.NationalityMaster", b =>
                {
                    b.Property<long>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("NationalityMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.ParentDetail", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FatherCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FatherCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMobile1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMobile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FatherStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("LGAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LGCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LGCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("LGEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGMobile1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGMobile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LGStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("MotherAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MotherCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MotherCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("MotherEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMobile1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherMobile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MotherStateId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentId");

                    b.HasIndex("FatherCityId");

                    b.HasIndex("FatherCountryId");

                    b.HasIndex("FatherStateId");

                    b.HasIndex("LGCityId");

                    b.HasIndex("LGCountryId");

                    b.HasIndex("LGStateId");

                    b.HasIndex("MotherCityId");

                    b.HasIndex("MotherCountryId");

                    b.HasIndex("MotherStateId");

                    b.ToTable("ParentDetail");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.PersonalDetail", b =>
                {
                    b.Property<long>("PersonalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BloodGroupdId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<long>("DomicileId")
                        .HasColumnType("bigint");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NationalityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PersonalEmail1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReligionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("StayAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StayRelationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StayTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonalDetailId");

                    b.HasIndex("BloodGroupdId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DomicileId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.HasIndex("StayRelationId");

                    b.HasIndex("StayTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonalDetail");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.ReligionMaster", b =>
                {
                    b.Property<long>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReligionId");

                    b.ToTable("ReligionMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StateMaster", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("StateMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StayrelationMaster", b =>
                {
                    b.Property<long>("StayrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Stayrelation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StayrelationId");

                    b.ToTable("StayrelationMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StaytypeMaster", b =>
                {
                    b.Property<long>("StaytypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Staytype")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaytypeId");

                    b.ToTable("StaytypeMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StudentAttendence", b =>
                {
                    b.Property<long>("StudentAttendenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attendence")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfAttend")
                        .HasColumnType("datetime2");

                    b.Property<int>("Held")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentAttendenceId");

                    b.ToTable("StudentAttendence");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StudentQualication", b =>
                {
                    b.Property<long>("StudentQualicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiplomaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EntranceExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("TenId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenPlusTwoId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentQualicationId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DiplomaId");

                    b.HasIndex("EntranceExamId");

                    b.HasIndex("TenId");

                    b.HasIndex("TenPlusTwoId");

                    b.ToTable("StudentQualication");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.TenMaster", b =>
                {
                    b.Property<long>("TenMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TenMarkingId")
                        .HasColumnType("bigint");

                    b.Property<int>("YearOfPassing")
                        .HasColumnType("int");

                    b.HasKey("TenMasterId");

                    b.HasIndex("TenMarkingId");

                    b.ToTable("TenMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.TenPlusTwoMaster", b =>
                {
                    b.Property<long>("TenMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PCMCGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TenPlusTwoMarkingId")
                        .HasColumnType("bigint");

                    b.Property<int>("YearOfPassing")
                        .HasColumnType("int");

                    b.HasKey("TenMasterId");

                    b.HasIndex("TenPlusTwoMarkingId");

                    b.ToTable("TenPlusTwoMaster");
                });

            modelBuilder.Entity("StudentManagement.Data.DBContexts.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<long>");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("StudentManagement.Data.DBContexts.UserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>");

                    b.HasDiscriminator().HasValue("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CityMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.StateMaster", "StateMaster")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.CollegeDetail", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.AdmissionbatchMaster", "AdmissionbatchMaster")
                        .WithMany()
                        .HasForeignKey("AdmissionBatchTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.AdmissiontypeMaster", "AdmissiontypeMaster")
                        .WithMany()
                        .HasForeignKey("AdmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.BatchMaster", "BatchMaster")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.CampusMaster", "CampusMaster")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.CollegeMaster", "CollegeMaster")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.CourseMaster", "CourseMaster")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", "UserMaster")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.BranchMaster", "BranchMaster")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.DegreeMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.MarkingSchemUGPGD", "MarkingSchemUGPGD")
                        .WithMany()
                        .HasForeignKey("DegreeMarkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.DiplomaMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.MarkingSchemUGPGD", "MarkingSchemUGPGD")
                        .WithMany()
                        .HasForeignKey("DiplomaMarkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.Documents", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.DocumentTypeMaster", "DocumentTypeMaster")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.EntranceExamMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.ExamTypeMaster", "ExamTypeMaster")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.ParentDetail", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.CityMaster", "FatherCityMaster")
                        .WithMany()
                        .HasForeignKey("FatherCityId");

                    b.HasOne("StudentManagement.Data.Models.CountryMaster", "FatherCountryMaster")
                        .WithMany()
                        .HasForeignKey("FatherCountryId");

                    b.HasOne("StudentManagement.Data.Models.StateMaster", "FatherStateMaster")
                        .WithMany()
                        .HasForeignKey("FatherStateId");

                    b.HasOne("StudentManagement.Data.Models.CityMaster", "LGCityMaster")
                        .WithMany()
                        .HasForeignKey("LGCityId");

                    b.HasOne("StudentManagement.Data.Models.CountryMaster", "LGCountryMaster")
                        .WithMany()
                        .HasForeignKey("LGCountryId");

                    b.HasOne("StudentManagement.Data.Models.StateMaster", "LGStateMaster")
                        .WithMany()
                        .HasForeignKey("LGStateId");

                    b.HasOne("StudentManagement.Data.Models.CityMaster", "MotherCityMaster")
                        .WithMany()
                        .HasForeignKey("MotherCityId");

                    b.HasOne("StudentManagement.Data.Models.CountryMaster", "MotherCountryMaster")
                        .WithMany()
                        .HasForeignKey("MotherCountryId");

                    b.HasOne("StudentManagement.Data.Models.StateMaster", "MotherStateMaster")
                        .WithMany()
                        .HasForeignKey("MotherStateId");

                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", "UserMaster")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.PersonalDetail", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.BloodgroupMaster", "BloodgroupMaster")
                        .WithMany()
                        .HasForeignKey("BloodGroupdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.CategoryMaster", "CategoryMaster")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.CityMaster", "CityMaster")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("StudentManagement.Data.Models.CountryMaster", "CountryMaster")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("StudentManagement.Data.Models.DomicileMaster", "DomicileMaster")
                        .WithMany()
                        .HasForeignKey("DomicileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.GenderMaster", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.NationalityMaster", "NationalityMaster")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.ReligionMaster", "ReligionMaster")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagement.Data.Models.StateMaster", "StateMaster")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("StudentManagement.Data.Models.StayrelationMaster", "Stayrelation")
                        .WithMany()
                        .HasForeignKey("StayRelationId");

                    b.HasOne("StudentManagement.Data.Models.StaytypeMaster", "StaytypeMaster")
                        .WithMany()
                        .HasForeignKey("StayTypeId");

                    b.HasOne("StudentManagement.Data.DBContexts.ApplicationUser", "UserMaster")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StateMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.CountryMaster", "CountryMaster")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.StudentQualication", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.DegreeMaster", "DegreeMaster")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("StudentManagement.Data.Models.DiplomaMaster", "DiplomaMaster")
                        .WithMany()
                        .HasForeignKey("DiplomaId");

                    b.HasOne("StudentManagement.Data.Models.EntranceExamMaster", "EntranceExamMaster")
                        .WithMany()
                        .HasForeignKey("EntranceExamId");

                    b.HasOne("StudentManagement.Data.Models.TenMaster", "TenMaster")
                        .WithMany()
                        .HasForeignKey("TenId");

                    b.HasOne("StudentManagement.Data.Models.TenPlusTwoMaster", "TenPlusTwoMaster")
                        .WithMany()
                        .HasForeignKey("TenPlusTwoId");
                });

            modelBuilder.Entity("StudentManagement.Data.Models.TenMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.MarkingSchemUGPGD", "MarkingSchemUGPGD")
                        .WithMany()
                        .HasForeignKey("TenMarkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Data.Models.TenPlusTwoMaster", b =>
                {
                    b.HasOne("StudentManagement.Data.Models.MarkingSchemUGPGD", "MarkingSchemUGPGD")
                        .WithMany()
                        .HasForeignKey("TenPlusTwoMarkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
